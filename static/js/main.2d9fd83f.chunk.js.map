{"version":3,"sources":["styles/cards.css.map","components/login/poker.png","components/login/Login.js","components/login/index.js","components/login/withProps.js","actions/index.js","components/player/PlayerCard.js","components/player/Player.js","components/player/index.js","components/player/withProps.js","components/results/index.js","components/results/Results.js","components/cpu/CpuCard.js","components/cpu/Cpu.js","components/cpu/index.js","components/cpu/withProps.js","components/pokerGame/PokerGame.js","components/pokerGame/index.js","components/pokerGame/withProps.js","App.js","serviceWorker.js","reducers/gameReducer.js","reducers/index.js","utilities/poker/poker.js","epics/index.js","index.js","store/index.js"],"names":["module","exports","Login","gameStart","gameOn","getUserName","className","src","logo","alt","type","placeholder","onChange","event","target","value","onClick","role","aria-label","withProps","Component","props","useSelector","state","name","dispatch","useDispatch","payload","PlayerCard","rank","suit","selected","cardSelected","htmlFor","slice","toUpperCase","dangerouslySetInnerHTML","__html","id","Player","hand","map","index","key","playerHand","Results","playerResult","cpuResult","winner","CpuCard","Cpu","cpuHand","PokerGame","homePage","resultPlayer","resultCpu","newRound","goToHome","cardsSelected","changeCards","playerMoney","cpuMoney","bidMoney","activeBid","length","disabled","money","playerBid","App","Boolean","window","location","hostname","match","initialState","deck","gameReducer","playerCombo","cpuCombo","newCard","filter","card","replacedCards","generateDeck","this","ranks","weight","weights","suits","createDeck","bind","shuffleDeck","createNewDeck","getPlayerHand","getCpuHand","getCardsByNumber","i","x","push","j","Math","floor","random","numberOfCards","result","rateCards","groupBy","rankTimes","suitsTimes","maxInARow","_","chain","sortBy","uniq","num","orderBy","last","n","getOfSameRank","getOfSameSuit","PokerRatings","RoyalFlush","hasInARow","hasOfSameSuit","hasAce","StraightFlush","FourOfAKind","hasOfSameRank","FullHouse","Flush","Straight","ThreeOfAKind","TwoPair","OnePair","HighCard","PokerHandRate","cards","Object","entries","find","is","assignWinnerPoints","res","console","log","myDeck","gamePreparationEpic","action$","ofType","pipe","deckCreation","deckIsReadyEpic","serveHandsToPlayersEpic","findTheWinnerEpic","state$","winnerFound","resPlayer","resCpu","winnerCalculate","resetGameEpic","mapTo","cardIsSelectedEpic","action","addOrRemoveCard","fillCardsEpic","cardsMissing","cpuBidEpic","delay","moneyToBid","evaluateHandsEpic","findWinner","store","epicsArr","epics","combineEpics","epicMiddleware","createEpicMiddleware","middleware","createStore","compose","applyMiddleware","devToolsExtension","f","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d9fd83f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cards.css.b35479c8.map\";","module.exports = __webpack_public_path__ + \"static/media/poker.c4b9c7b4.png\";","import React from \"react\";\nimport PokerGame from \"../pokerGame\";\n\nimport logo from \"./poker.png\";\nimport \"./login.scss\";\n\nconst Login = ({ gameStart, gameOn, getUserName }) => {\n  if (gameOn) {\n    return <PokerGame />;\n  } else {\n    return (\n      <div className=\"login\">\n        <h2 className=\"login__heading\">Welcome To The Poker Game</h2>\n        <img className=\"login__img\" src={logo} alt=\"poker logo\" />\n        <p className=\"login__tutorial\">\n          Enter Your Name & Press button to Begin!\n        </p>\n\n        <form className=\"login__form\">\n          <input\n            type=\"text\"\n            placeholder=\"Insert Your Name Here\"\n            className=\"login__input\"\n            onChange={event => getUserName(event.target.value)}\n          ></input>\n        </form>\n\n        <button onClick={gameStart} className=\"login__btn\">\n          You Versus CPU\n        </button>\n\n        <p className=\"login__footer\">\n          Made by Dionysis Koufis Using\n          <span role=\"img\" aria-label=\"react\">\n            ⚛️\n          </span>\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default Login;\n","import Login from \"./Login\";\nimport withProps from \"./withProps\";\n\nexport default withProps(Login);\n","import React from \"react\";\r\nimport Login from \"./Login\";\r\nimport { getUserName, settingGame } from \"../../actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst withProps = Component => props => {\r\n  const { name, gameOn } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Login\r\n      name={name}\r\n      gameOn={gameOn}\r\n      gameStart={() => dispatch(settingGame())}\r\n      getUserName={name => dispatch(getUserName(name))}\r\n    />\r\n  );\r\n};\r\nexport default withProps;\r\n","export const settingGame = () => ({\n  type: \"SETTING_GAME\"\n});\n\nexport const deckServed = () => ({\n  type: \"DECK_SERVED\"\n});\n\nexport const getUserName = name => ({\n  type: \"GET_USER_NAME\",\n  payload: { name }\n});\n\nexport const goToHome = () => ({\n  type: \"GO_TO_HOME\"\n});\n\nexport const newRound = () => ({\n  type: \"NEW_ROUND\"\n});\n\nexport const deckCreation = deck => ({\n  type: \"DECK_CREATION\",\n  payload: { deck }\n});\n\nexport const giveCardsToPlayers = (playerHand, cpuHand) => ({\n  type: \"GIVE_CARDS_TO_PLAYERS\",\n  payload: {\n    playerHand,\n    cpuHand\n  }\n});\n\nexport const findWinner = (playerCombo, cpuCombo) => ({\n  type: \"FIND_WINNER\",\n  payload: {\n    playerCombo,\n    cpuCombo\n  }\n});\n\nexport const winnerFound = winner => ({\n  type: \"WINNER_FOUND\",\n  payload: {\n    winner\n  }\n});\n\nexport const reset = () => ({\n  type: \"RESET\"\n});\n\nexport const cardSelected = (selected, id) => ({\n  type: \"CARD_SELECTED\",\n  payload: {\n    selected,\n    id\n  }\n});\n\nexport const addOrRemoveCard = (newCard, id) => ({\n  type: \"ADD_OR_REMOVE_CARD\",\n  payload: { newCard, id }\n});\n\nexport const changeCards = () => ({\n  type: \"CHANGE_CARDS\"\n});\n\nexport const fillPlayerHandWithCards = replacedCards => ({\n  type: \"FILL_PLAYER_HAND_WITH_CARDS\",\n  payload: {\n    replacedCards\n  }\n});\n\nexport const playerBid = money => ({\n  type: \"PLAYER_BID\",\n  payload: { money }\n});\n\nexport const cpuBid = money => ({\n  type: \"CPU_BID\",\n  payload: { money }\n});\n","import React from \"react\";\r\nimport \"../../styles/cards.css\";\r\nimport \"../../styles/cards.css.map\";\r\n\r\nconst PlayerCard = ({ rank, suit, selected, cardSelected }) => (\r\n  <label\r\n    htmlFor={`c-${rank}${suit.slice(0, 1).toUpperCase()}`}\r\n    className={`card rank-${rank} ${suit}`}\r\n    onChange={cardSelected}\r\n  >\r\n    <span className=\"rank\">{rank.toUpperCase()}</span>\r\n    <span\r\n      className=\"suit\"\r\n      dangerouslySetInnerHTML={{ __html: `&${suit};` }}\r\n    ></span>\r\n    <input\r\n      type=\"checkbox\"\r\n      name={`c-${rank}${suit.slice(0, 1).toUpperCase()}`}\r\n      id={`c-${rank}${suit.slice(0, 1).toUpperCase()}`}\r\n      value=\"select\"\r\n      selected={selected}\r\n    />\r\n  </label>\r\n);\r\n//tsekarei giati kathe karta\r\n//den pernei to ID\r\n\r\nexport default PlayerCard;\r\n","import React from \"react\";\r\nimport PlayerCard from \"./PlayerCard\";\r\n\r\nconst Player = ({ hand, cardSelected }) => (\r\n  <div>\r\n    <div className=\"handRow\">\r\n      <div className=\"playingCards\">\r\n        <ul className=\"table\">\r\n          {hand.map(({ rank, suit, selected, index }) => (\r\n            <li key={index}>\r\n              <PlayerCard\r\n                hand={hand}\r\n                rank={rank}\r\n                suit={suit}\r\n                cardSelected={cardSelected}\r\n                selected={selected}\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Player;\r\n","import Player from \"./Player\";\r\nimport withProps from \"./withProps\";\r\n\r\nexport default withProps(Player);\r\n","import React from \"react\";\r\nimport Player from \"./Player\";\r\nimport { cardSelected } from \"../../actions\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst withProps = Component => props => {\r\n  const { playerHand } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Player\r\n      hand={playerHand}\r\n      cardSelected={event =>\r\n        dispatch(cardSelected(event.target.selected, event.target.id))\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default withProps;\r\n","import Results from \"./Results\";\n\nexport default Results;\n","import React from \"react\";\nimport \"./results.scss\";\nimport player from \"../player\";\n\nconst Results = ({ playerResult, cpuResult, winner }) => {\n  if (playerResult === null && cpuResult === null && winner === null) {\n    return (\n      <div className=\"stats\">\n        <p className=\"awaitingRound\">Waiting Round to finish</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"stats\">\n        <div className=\"stats__player\">Player: {playerResult}</div>\n        <div className=\"stats__cpu\">CPU: {cpuResult}</div>\n        <div className=\"stats__winner\">\n          Winner:\n          <span className=\"stats__winner__mod\">{winner}</span>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Results;\n","import React from \"react\";\r\nimport \"../../styles/cards.css\";\r\nimport \"../../styles/cards.css.map\";\r\n\r\nconst CpuCard = ({ rank, suit }) => (\r\n  <div className={`card back href=\"#\"`}>\r\n    <span className=\"rank\">{rank.toUpperCase()}</span>\r\n    <span\r\n      className=\"suit\"\r\n      dangerouslySetInnerHTML={{ __html: `&${suit};` }}\r\n    ></span>\r\n  </div>\r\n);\r\n\r\nexport default CpuCard;\r\n","import React from \"react\";\r\nimport CpuCard from \"./CpuCard\";\r\n\r\nconst Cpu = ({ hand }) => (\r\n  <div>\r\n    <div className=\"handRow\">\r\n      <div className=\"playingCards\">\r\n        <ul className=\"table\">\r\n          {hand.map(({ rank, suit }, index) => (\r\n            <li key={index}>\r\n              <CpuCard rank={rank} suit={suit} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Cpu;\r\n","import Cpu from \"./Cpu\";\r\nimport withProps from \"./withProps\";\r\n\r\nexport default withProps(Cpu);\r\n","import React from \"react\";\r\nimport Cpu from \"./Cpu\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst withProps = Component => props => {\r\n  const { cpuHand } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  return <Cpu hand={cpuHand} />;\r\n};\r\n\r\nexport default withProps;\r\n","import React from \"react\";\r\nimport Login from \"../login\";\r\nimport Results from \"../results\";\r\nimport Player from \"../player\";\r\nimport Cpu from \"../cpu\";\r\n\r\nimport \"./pokerGame.scss\";\r\n\r\nconst PokerGame = ({\r\n  name,\r\n  homePage,\r\n  resultPlayer,\r\n  resultCpu,\r\n  winner,\r\n  newRound,\r\n  goToHome,\r\n  cardsSelected,\r\n  changeCards,\r\n  playerMoney,\r\n  cpuMoney,\r\n  bidMoney,\r\n  activeBid\r\n}) => {\r\n  if (homePage) {\r\n    return <Login />;\r\n  } else {\r\n    return (\r\n      <div className=\"pokerMain\">\r\n        <div className=\"pokerMain__console\">\r\n          <h2 className=\"pokerMain__console__tittle\">Poker Console</h2>\r\n          <p className=\"pokerMain__console__cardsSelection\">\r\n            You have selected{\" \"}\r\n            <span className=\"colored\">{cardsSelected.length}</span>{\" \"}\r\n            {cardsSelected.length <= 1 ? (\r\n              <p className=\"cardText\">card</p>\r\n            ) : (\r\n              <p className=\"cardText\">cards</p>\r\n            )}\r\n          </p>\r\n          <button\r\n            className=\"pokerMain__console__btnChange\"\r\n            onClick={changeCards}\r\n          >\r\n            Change Cards\r\n          </button>\r\n          <p className=\"console__playerMoney\">Your Money : {playerMoney}💲</p>\r\n          <p className=\"console__cpuMoney\">Host Money : {cpuMoney}💲</p>\r\n\r\n          <div className=\"console__buttonsBid\">\r\n            <p className=\"console__bidText\">Bid:</p>\r\n            <button\r\n              className=\"console__btnBid\"\r\n              disabled={playerMoney <= 100 ? true : false}\r\n              onClick={() => bidMoney(100)}\r\n            >\r\n              100💲\r\n            </button>\r\n            <button\r\n              className=\"console__btnBid\"\r\n              disabled={playerMoney >= 200 ? false : true}\r\n              onClick={() => bidMoney(200)}\r\n            >\r\n              200💲\r\n            </button>\r\n          </div>\r\n          <p>\r\n            Active Bids: <span className=\"colored\">{activeBid}💲</span>\r\n          </p>\r\n\r\n          <Results\r\n            playerResult={resultPlayer}\r\n            cpuResult={resultCpu}\r\n            winner={winner}\r\n          />\r\n\r\n          <button className=\"pokerMain__reset\" onClick={newRound}>\r\n            Reset\r\n          </button>\r\n\r\n          <button className=\"pokerMain__toHome\" onClick={goToHome}>\r\n            Back To Home Screen\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"pokerMain__handsContainer\">\r\n          <div className=\"pokerMain__box\">\r\n            <p className=\"pokerMain__box__player\">{name}</p>\r\n          </div>\r\n\r\n          <Player />\r\n\r\n          <div className=\"pokerMain__box\">\r\n            <p className=\"pokerMain__box__host\">Host</p>\r\n          </div>\r\n\r\n          <Cpu />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default PokerGame;\r\n","import PokerGame from \"./PokerGame\";\nimport withProps from \"./withProps\";\n\nexport default withProps(PokerGame);\n","import React from \"react\";\nimport PokerGame from \"./PokerGame\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { reset, goToHome, changeCards, playerBid } from \"../../actions\";\n\nconst withProps = Component => props => {\n  const {\n    name,\n    homePage,\n    gameOn,\n    resultPlayer,\n    resultCpu,\n    winner,\n    cardsSelected,\n    playerMoney,\n    cpuMoney,\n    activeBid\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  return (\n    <PokerGame\n      name={name}\n      gameOn={gameOn}\n      homePage={homePage}\n      resultPlayer={resultPlayer}\n      resultCpu={resultCpu}\n      winner={winner}\n      cardsSelected={cardsSelected}\n      playerMoney={playerMoney}\n      cpuMoney={cpuMoney}\n      changeCards={() => dispatch(changeCards())}\n      newRound={() => dispatch(reset())}\n      goToHome={() => dispatch(goToHome())}\n      bidMoney={money => dispatch(playerBid(money))}\n      activeBid={activeBid}\n    />\n  );\n};\n\nexport default withProps;\n","import React from \"react\";\nimport { Login } from \"./components\";\n\nimport \"./_config.scss\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Login />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  name: null || \"You\",\r\n  gameOn: false,\r\n  homePage: true,\r\n  deck: null,\r\n  playerHand: null,\r\n  cpuHand: null,\r\n  playerMoney: 200,\r\n  cpuMoney: 200,\r\n  activeBid: 0,\r\n  resultPlayer: null,\r\n  resultCpu: null,\r\n  winner: null,\r\n  cardsSelected: []\r\n};\r\n\r\nconst gameReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"GET_USER_NAME\":\r\n      return {\r\n        ...state,\r\n        name: payload.name\r\n      };\r\n\r\n    case \"SETTING_GAME\":\r\n      return {\r\n        ...state,\r\n        gameOn: true,\r\n        homePage: false\r\n      };\r\n\r\n    case \"DECK_CREATION\":\r\n      return {\r\n        ...state,\r\n        deck: payload.deck\r\n      };\r\n\r\n    case \"DECK_SERVED\":\r\n      return { ...state };\r\n\r\n    case \"GIVE_CARDS_TO_PLAYERS\":\r\n      return {\r\n        ...state,\r\n        playerHand: payload.playerHand,\r\n        cpuHand: payload.cpuHand\r\n      };\r\n\r\n    case \"GO_TO_HOME\":\r\n      return {\r\n        ...state,\r\n        homePage: true,\r\n        gameOn: false,\r\n        name: null || \"You\"\r\n      };\r\n\r\n    case \"FIND_WINNER\":\r\n      return {\r\n        ...state,\r\n        resultPlayer: payload.playerCombo,\r\n        resultCpu: payload.cpuCombo\r\n      };\r\n\r\n    case \"WINNER_FOUND\":\r\n      return { ...state, winner: payload.winner };\r\n\r\n    case \"RESET\":\r\n      return {\r\n        ...state,\r\n        gameOn: false,\r\n        homePage: true,\r\n        deck: null,\r\n        playerHand: null,\r\n        cpuHand: null,\r\n        playerMoney: 200,\r\n        cpuMoney: 200,\r\n        activeBid: 0,\r\n        resultPlayer: null,\r\n        resultCpu: null,\r\n        winner: null,\r\n        cardsSelected: []\r\n      };\r\n\r\n    case \"CARD_SELECTED\":\r\n      return {\r\n        ...state\r\n      };\r\n\r\n    case \"ADD_OR_REMOVE_CARD\":\r\n      if (!payload.newCard[0].selected) {\r\n        payload.newCard[0].selected = !payload.newCard[0].selected;\r\n        payload.newCard[0].id = payload.id;\r\n\r\n        return {\r\n          ...state,\r\n          cardsSelected: [...state.cardsSelected, payload.newCard[0]]\r\n        };\r\n      } else if (payload.newCard[0].selected) {\r\n        payload.newCard[0].selected = !payload.newCard[0].selected;\r\n        return {\r\n          ...state,\r\n          cardsSelected: state.cardsSelected.filter(\r\n            card => payload.newCard[0].id !== card.id\r\n          )\r\n        };\r\n      }\r\n\r\n    case \"CHANGE_CARDS\":\r\n      return {\r\n        ...state,\r\n        playerHand: state.playerHand.filter(card => card.selected !== true),\r\n        cardsSelected: []\r\n      };\r\n\r\n    case \"FILL_PLAYER_HAND_WITH_CARDS\": {\r\n      return {\r\n        ...state,\r\n        playerHand: [...payload.replacedCards, ...state.playerHand]\r\n      };\r\n    }\r\n\r\n    case \"PLAYER_BID\": {\r\n      return {\r\n        ...state,\r\n        playerMoney: state.playerMoney - payload.money,\r\n        activeBid: state.activeBid + payload.money\r\n      };\r\n    }\r\n\r\n    case \"CPU_BID\": {\r\n      return {\r\n        ...state,\r\n        cpuMoney: state.cpuMoney - payload.money,\r\n        activeBid: state.activeBid + payload.money\r\n      };\r\n    }\r\n\r\n    default:\r\n      return initialState;\r\n  }\r\n};\r\n\r\nexport default gameReducer;\r\n","import gameReducer from \"./gameReducer\";\r\n\r\nexport default gameReducer;\r\n","import { groupBy } from \"lodash\";\r\nimport _ from \"lodash\";\r\n\r\nconst maxInARow = weights =>\r\n  _.chain(weights)\r\n    .sortBy()\r\n    .uniq()\r\n    .map((num, i) => num - i)\r\n    .groupBy()\r\n    .orderBy(\"length\")\r\n    .last()\r\n    .value().length;\r\n\r\nclass generateDeck {\r\n  constructor() {\r\n    this.deck = [];\r\n    this.playerHand = [];\r\n    this.cpuHand = [];\r\n    this.ranks = [\r\n      { rank: \"2\", weight: 1 },\r\n      { rank: \"3\", weight: 2 },\r\n      { rank: \"4\", weight: 3 },\r\n      { rank: \"5\", weight: 4 },\r\n      { rank: \"6\", weight: 5 },\r\n      { rank: \"7\", weight: 6 },\r\n      { rank: \"8\", weight: 7 },\r\n      { rank: \"9\", weight: 8 },\r\n      { rank: \"10\", weight: 9 },\r\n      { rank: \"j\", weight: 10 },\r\n      { rank: \"q\", weight: 11 },\r\n      { rank: \"k\", weight: 12 },\r\n      { rank: \"a\", weight: 13 }\r\n    ];\r\n    this.weights = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n    this.suits = [\"hearts\", \"clubs\", \"diams\", \"spades\"];\r\n    this.createDeck = this.createDeck.bind(this);\r\n    this.shuffleDeck = this.shuffleDeck.bind(this);\r\n    this.createNewDeck = this.createNewDeck.bind(this);\r\n    this.getPlayerHand = this.getPlayerHand.bind(this);\r\n    this.getCpuHand = this.getCpuHand.bind(this);\r\n    this.getCardsByNumber = this.getCardsByNumber.bind(this);\r\n    this.createNewDeck();\r\n  }\r\n\r\n  createDeck() {\r\n    for (var i = 0; i < this.suits.length; i++) {\r\n      for (var x = 0; x < this.ranks.length; x++) {\r\n        var card = {\r\n          rank: this.ranks[x].rank,\r\n          weight: this.ranks[x].weight,\r\n          suit: this.suits[i],\r\n          selected: false\r\n        };\r\n        this.deck.push(card);\r\n      }\r\n    }\r\n    this.shuffleDeck();\r\n  }\r\n\r\n  shuffleDeck() {\r\n    this.deck = this.deck.map((card, index) => {\r\n      card.index = index;\r\n      return card;\r\n    });\r\n    for (let i = this.deck.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [this.deck[i], this.deck[j]] = [this.deck[j], this.deck[i]];\r\n    }\r\n  }\r\n\r\n  getPlayerHand() {\r\n    this.playerHand = this.deck.slice(46, 51);\r\n    return this.playerHand;\r\n  }\r\n\r\n  getCpuHand() {\r\n    this.cpuHand = this.deck.slice(41, 46);\r\n    this.deck = this.deck.slice(0, 42);\r\n    // Slicing The Deck After Both Players Picked Their Hand\r\n    return this.cpuHand;\r\n  }\r\n\r\n  getCardsByNumber(numberOfCards) {\r\n    const result = this.deck.slice(0, numberOfCards);\r\n    this.deck = this.deck.slice(numberOfCards, 42);\r\n    return result;\r\n  }\r\n\r\n  createNewDeck() {\r\n    this.deck = [];\r\n    this.createDeck();\r\n    return this.deck;\r\n  }\r\n}\r\n\r\nclass rateCards {\r\n  constructor(hand) {\r\n    this.ranks = groupBy(hand, \"rank\");\r\n    this.suits = groupBy(hand, \"suit\");\r\n    this.rankTimes = groupBy(this.ranks, \"length\");\r\n    this.suitsTimes = groupBy(this.suits, \"length\");\r\n    this.maxInARow = maxInARow(hand.map(({ weight }) => weight));\r\n  }\r\n\r\n  getOfSameRank(n) {\r\n    return this.rankTimes[n] || [];\r\n  }\r\n\r\n  hasOfSameRank(n) {\r\n    return this.getOfSameRank(n).length;\r\n  }\r\n\r\n  getOfSameSuit(n) {\r\n    return this.suitsTimes[n] || [];\r\n  }\r\n\r\n  hasOfSameSuit(n) {\r\n    return this.getOfSameSuit(n).length;\r\n  }\r\n  hasAce() {\r\n    return !!this.ranks[\"A\"];\r\n  }\r\n\r\n  hasInARow(n) {\r\n    return this.maxInARow >= n;\r\n  }\r\n}\r\n\r\nconst PokerRatings = {\r\n  RoyalFlush: hand =>\r\n    hand.hasInARow(5) && hand.hasOfSameSuit(5) && hand.hasAce(),\r\n  StraightFlush: hand => hand.hasInARow(5) && hand.hasOfSameSuit(5),\r\n  FourOfAKind: hand => hand.hasOfSameRank(4),\r\n  FullHouse: hand => hand.hasOfSameRank(3) && hand.hasOfSameRank(2),\r\n  Flush: hand => hand.hasOfSameSuit(5),\r\n  Straight: hand => hand.hasInARow(5),\r\n  ThreeOfAKind: hand => hand.hasOfSameRank(3),\r\n  TwoPair: hand => hand.hasOfSameRank(2) >= 2,\r\n  OnePair: hand => hand.hasOfSameRank(2),\r\n  HighCard: hand => hand.hasOfSameRank(1) >= 5\r\n};\r\n\r\nconst PokerHandRate = cards =>\r\n  Object.entries(PokerRatings).find(([, is]) => is(cards))[0];\r\n\r\nconst assignWinnerPoints = res => {\r\n  switch (res) {\r\n    case \"RoyalFlush\":\r\n      return 10;\r\n    case \"StraightFlush\":\r\n      return 9;\r\n    case \"FourOfAKind\":\r\n      return 8;\r\n    case \"FullHouse\":\r\n      return 7;\r\n    case \"Flush\":\r\n      return 6;\r\n    case \"Straight\":\r\n      return 5;\r\n    case \"ThreeOfAKind\":\r\n      return 4;\r\n    case \"TwoPair\":\r\n      return 3;\r\n    case \"OnePair\":\r\n      return 2;\r\n    case \"HighCard\":\r\n      return 1;\r\n    default:\r\n      console.log(\"Error Occured\");\r\n  }\r\n};\r\n\r\nconst winnerCalculate = (resPlayer, resCpu) => {\r\n  let winner;\r\n  let playerResult = assignWinnerPoints(resPlayer);\r\n  let cpuResult = assignWinnerPoints(resCpu);\r\n\r\n  if (playerResult > cpuResult) {\r\n    winner = \"Player\";\r\n  } else if (cpuResult > playerResult) {\r\n    winner = \"CPU\";\r\n  } else {\r\n    winner = \"Tie\";\r\n  }\r\n  return winner;\r\n};\r\n\r\nconst myDeck = new generateDeck();\r\n\r\n//Exports\r\n\r\nconst {\r\n  deck,\r\n  getPlayerHand,\r\n  getCpuHand,\r\n  createNewDeck,\r\n  shuffleDeck,\r\n  getCardsByNumber\r\n} = myDeck;\r\nexport {\r\n  shuffleDeck,\r\n  getCardsByNumber,\r\n  createNewDeck,\r\n  deck,\r\n  getPlayerHand,\r\n  getCpuHand,\r\n  PokerHandRate,\r\n  rateCards,\r\n  winnerCalculate\r\n};\r\n","import { mapTo, map, delay } from \"rxjs/operators\";\r\n\r\nimport {\r\n  createNewDeck,\r\n  getPlayerHand,\r\n  getCpuHand,\r\n  PokerHandRate,\r\n  rateCards,\r\n  winnerCalculate,\r\n  getCardsByNumber\r\n} from \"../utilities/poker/poker.js\";\r\n\r\nimport {\r\n  deckCreation,\r\n  deckServed,\r\n  giveCardsToPlayers,\r\n  findWinner,\r\n  winnerFound,\r\n  settingGame,\r\n  addOrRemoveCard,\r\n  fillPlayerHandWithCards,\r\n  cpuBid\r\n} from \"../actions\";\r\n\r\nexport const gamePreparationEpic = action$ =>\r\n  action$.ofType(\"SETTING_GAME\").pipe(map(() => deckCreation(createNewDeck())));\r\n\r\nexport const deckIsReadyEpic = action$ =>\r\n  action$.ofType(\"DECK_CREATION\").pipe(map(() => deckServed()));\r\n\r\nexport const serveHandsToPlayersEpic = action$ =>\r\n  action$\r\n    .ofType(\"DECK_SERVED\")\r\n    .pipe(map(() => giveCardsToPlayers(getPlayerHand(), getCpuHand())));\r\n\r\nexport const findTheWinnerEpic = (action$, state$) =>\r\n  action$.ofType(\"FIND_WINNER\").pipe(\r\n    map(() => {\r\n      const winner = winnerCalculate(\r\n        state$.value.resultPlayer,\r\n        state$.value.resultCpu\r\n      );\r\n      return winnerFound(winner);\r\n    })\r\n  );\r\n\r\nexport const resetGameEpic = action$ =>\r\n  action$.ofType(\"RESET\").pipe(mapTo(settingGame()));\r\n\r\nexport const cardIsSelectedEpic = (action$, state$) =>\r\n  action$.ofType(\"CARD_SELECTED\").pipe(\r\n    map(action => {\r\n      const newCard = state$.value.playerHand.filter(card => {\r\n        const id = `c-${card.rank}${card.suit.slice(0, 1).toUpperCase()}`;\r\n        if (action.payload.id === id) {\r\n          return card;\r\n        }\r\n      });\r\n\r\n      return addOrRemoveCard(newCard, action.payload.id);\r\n    })\r\n  );\r\n\r\nexport const fillCardsEpic = (action$, state$) =>\r\n  action$.ofType(\"CHANGE_CARDS\").pipe(\r\n    map(() => {\r\n      const cardsMissing = 5 - state$.value.playerHand.length;\r\n      return fillPlayerHandWithCards(getCardsByNumber(cardsMissing));\r\n    })\r\n  );\r\n\r\nexport const cpuBidEpic = (action$, state$) =>\r\n  action$.ofType(\"PLAYER_BID\").pipe(\r\n    delay(1000),\r\n    map(() => {\r\n      const moneyToBid = state$.value.activeBid;\r\n      return cpuBid(moneyToBid);\r\n    })\r\n  );\r\n\r\nexport const evaluateHandsEpic = (action$, state$) =>\r\n  action$.ofType(\"CPU_BID\").pipe(\r\n    delay(600),\r\n    map(() => {\r\n      const playerCombo = PokerHandRate(new rateCards(state$.value.playerHand));\r\n      const cpuCombo = PokerHandRate(new rateCards(state$.value.cpuHand));\r\n      return findWinner(playerCombo, cpuCombo);\r\n    })\r\n  );\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { configureStore } from \"./store\";\nimport { Provider } from \"react-redux\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\r\nimport { createEpicMiddleware, combineEpics } from \"redux-observable\";\r\nimport gameReducer from \"../reducers\";\r\n\r\nimport {\r\n  gamePreparationEpic,\r\n  deckIsReadyEpic,\r\n  serveHandsToPlayersEpic,\r\n  evaluateHandsEpic,\r\n  findTheWinnerEpic,\r\n  resetGameEpic,\r\n  cardIsSelectedEpic,\r\n  fillCardsEpic,\r\n  cpuBidEpic\r\n} from \"../epics\";\r\n\r\nconst configureStore = () => {\r\n  const epicsArr = [\r\n    gamePreparationEpic,\r\n    deckIsReadyEpic,\r\n    serveHandsToPlayersEpic,\r\n    evaluateHandsEpic,\r\n    findTheWinnerEpic,\r\n    resetGameEpic,\r\n    cardIsSelectedEpic,\r\n    fillCardsEpic,\r\n    cpuBidEpic\r\n  ];\r\n  const epics = combineEpics(...epicsArr);\r\n  const epicMiddleware = createEpicMiddleware();\r\n  const middleware = [epicMiddleware];\r\n  // const rootReducer = combineReducers(null);\r\n  const store = createStore(\r\n    gameReducer,\r\n    compose(\r\n      applyMiddleware(...middleware),\r\n      window.devToolsExtension ? window.devToolsExtension() : f => f\r\n    )\r\n  );\r\n  epicMiddleware.run(epics);\r\n  return store;\r\n};\r\n\r\nexport { configureStore };\r\n"],"sourceRoot":""}